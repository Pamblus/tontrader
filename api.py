import requests
import json
import time
from config import TRADING_API_KEY, REQUEST_TIMEOUT, TRADING_BASE_URL

class TradingAPI:
    def __init__(self):
        self.base_url = TRADING_BASE_URL  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
        self.headers = {
            "Authorization": f"Bearer {TRADING_API_KEY}",
            "accept": "application/json, text/plain, */*",
            "accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
            "content-type": "application/json",
            "sec-ch-ua": "\"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\"",
            "sec-ch-ua-mobile": "?1",
            "sec-ch-ua-platform": "\"Android\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-site"
        }
    
    def get_session(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏ –±–∞–ª–∞–Ω—Å"""
        try:
            response = requests.get(
                f"{self.base_url}/users/session",
                headers=self.headers,
                timeout=REQUEST_TIMEOUT
            )
            return response.json() if response.status_code == 200 else None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return None
    
    def get_instruments(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        try:
            response = requests.get(
                f"{self.base_url}/instruments",
                headers=self.headers,
                timeout=REQUEST_TIMEOUT
            )
            if response.status_code == 200:
                data = response.json()
                return data.get('instruments', [])[:10]
            return []
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
            return []
    
    def get_price_history(self, symbol, count=30):
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω"""
        try:
            response = requests.get(
                f"{self.base_url}/instruments/history/{symbol}/m1?count={count}",
                headers=self.headers,
                timeout=REQUEST_TIMEOUT
            )
            return response.json() if response.status_code == 200 else None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ {symbol}: {e}")
            return None
    
    def get_closed_trades(self, wallet, from_time, to_time):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º PnL"""
        try:
            response = requests.get(
                f"{self.base_url}/trades/closed/{wallet}?from={from_time}&to={to_time}",
                headers=self.headers,
                timeout=REQUEST_TIMEOUT
            )
            return response.json() if response.status_code == 200 else None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫: {e}")
            return None
    
    def get_active_trades(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            response = requests.get(
                f"{self.base_url}/trades/active",
                headers=self.headers,
                timeout=REQUEST_TIMEOUT
            )
            if response.status_code == 200:
                return response.json()
            
            # –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
            response = requests.get(
                f"{self.base_url}/trades",
                headers=self.headers,
                timeout=REQUEST_TIMEOUT
            )
            return response.json() if response.status_code == 200 else {"trades": []}
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {e}")
            return {"trades": []}
    
    def get_trade_status(self, trade_id):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        try:
            response = requests.get(
                f"{self.base_url}/trades/{trade_id}",
                headers=self.headers,
                timeout=REQUEST_TIMEOUT
            )
            return response.json() if response.status_code == 200 else None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏ {trade_id}: {e}")
            return None
    
    def get_all_trades_with_profit(self, wallet="DOLLR"):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–¥–µ–ª–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º PnL"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
            from_time = 0
            to_time = int(time.time() * 1000)  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º—Å
            
            closed_trades = self.get_closed_trades(wallet, from_time, to_time)
            active_trades = self.get_active_trades()
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏
            all_trades = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
            if active_trades and 'trades' in active_trades:
                for trade in active_trades['trades']:
                    trade['status'] = 'active'
                    trade['current_profit'] = self.calculate_current_profit(trade)
                    all_trades.append(trade)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
            if closed_trades and 'trades' in closed_trades:
                for trade in closed_trades['trades']:
                    trade['status'] = 'closed'
                    trade['current_profit'] = trade.get('profit', 0)
                    all_trades.append(trade)
            
            return all_trades
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫: {e}")
            return []
    
    def calculate_current_profit(self, trade):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–π PnL –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            instruments = self.get_instruments()
            current_instrument = next((inst for inst in instruments if inst['symbol'] == trade['instrument']), None)
            
            if not current_instrument:
                return 0
            
            current_price = float(current_instrument.get('rate', 0))
            open_price = float(trade['open_rate'])
            amount = float(trade['amount'])
            leverage = int(trade['leverage'])
            
            if trade['direction'] == 'buy':
                profit = (current_price - open_price) / open_price * amount * leverage
            else:
                profit = (open_price - current_price) / open_price * amount * leverage
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
            commission = float(trade.get('commission', 0))
            return profit + commission
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ PnL: {e}")
            return 0
    
    def open_trade(self, amount, direction, instrument, leverage, wallet, 
                   take_profit=None, stop_loss=None):
        """–û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É"""
        try:
            data = {
                "amount": amount,
                "direction": direction,
                "instrument": instrument,
                "leverage": leverage,
                "wallet": wallet,
                "take_profit_price": take_profit,
                "stop_loss_price": stop_loss
            }
            
            response = requests.post(
                f"{self.base_url}/trades",
                headers=self.headers,
                json=data,
                timeout=REQUEST_TIMEOUT
            )
            return response.json() if response.status_code == 200 else None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            return None
    
    def close_trade(self, trade_id):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É"""
        try:
            response = requests.post(
                f"{self.base_url}/trades/{trade_id}/close",
                headers=self.headers,
                json={},  # –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
                timeout=REQUEST_TIMEOUT
            )
            
            print(f"üîß –°—Ç–∞—Ç—É—Å –∑–∞–∫—Ä—ã—Ç–∏—è: {response.status_code}")
            if response.status_code != 200:
                print(f"üîß –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            
            return response.json() if response.status_code == 200 else None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            return None
