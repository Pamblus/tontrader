import time
import json
from datetime import datetime
from api import TradingAPI
from ai import AITrader
from config import UPDATE_INTERVAL, DEFAULT_WALLET, HISTORY_COUNT

class TradingBot:
    def __init__(self):
        self.api = TradingAPI()
        self.ai = AITrader()
        self.stats = {
            'total_trades': 0,
            'profit_trades': 0,
            'loss_trades': 0,
            'total_profit': 0,
            'active_trades': []
        }
    
    def get_market_data(self):
        """–°–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        session = self.api.get_session()
        instruments = self.api.get_instruments()
        
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å–¥–µ–ª–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º PnL
        all_trades = self.api.get_all_trades_with_profit(DEFAULT_WALLET)
        active_trades = [t for t in all_trades if t.get('status') == 'active']
        closed_trades = [t for t in all_trades if t.get('status') == 'closed']
        
        # –ü–æ–ª—É—á–∞–µ–º –î–ï–¢–ê–õ–¨–ù–£–Æ –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è –í–°–ï–• –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        detailed_instruments = []
        price_history = {}
        
        for instrument in instruments:
            symbol = instrument['symbol']
            history = self.api.get_price_history(symbol, HISTORY_COUNT)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ –¥–µ—Ç–∞–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            instrument_data = {
                'symbol': symbol,
                'alias': instrument.get('alias', ''),
                'current_rate': instrument.get('rate', ''),
                'ask': instrument.get('ask', ''),
                'bid': instrument.get('bid', ''),
                'change_percent': instrument.get('profit_day_pl_percent', ''),
                'is_trading_open': instrument.get('is_trading_open', False)
            }
            detailed_instruments.append(instrument_data)
            
            if history and 'history' in history:
                recent_prices = history['history'][-20:]
                price_history[symbol] = recent_prices
                
                # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
                if len(recent_prices) >= 5:
                    first_price = float(recent_prices[0]['c'])
                    last_price = float(recent_prices[-1]['c'])
                    trend = "üìà –í–û–°–•–û–î–Ø–©–ò–ô" if last_price > first_price else "üìâ –ù–ò–°–•–û–î–Ø–©–ò–ô" if last_price < first_price else "‚û°Ô∏è –ë–û–ö–û–í–û–ô"
                    instrument_data['trend'] = trend
                    instrument_data['trend_strength'] = abs((last_price - first_price) / first_price * 100)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —Å –†–ï–ê–õ–¨–ù–´–ú PnL
        formatted_active_trades = []
        for trade in active_trades:
            current_profit = trade.get('current_profit', 0)
            profit_percent = (current_profit / float(trade['amount'])) * 100 if float(trade['amount']) > 0 else 0
            
            formatted_trade = {
                'id': trade['id'],
                'instrument': trade['instrument'],
                'direction': trade['direction'],
                'amount': trade['amount'],
                'leverage': trade['leverage'],
                'open_rate': trade['open_rate'],
                'opened_at': trade['opened_at'],
                'status': trade['status'],
                'current_profit': current_profit,
                'profit_percent': profit_percent,
                'profit_status': "–ü–†–ò–ë–´–õ–¨" if current_profit > 0 else "–£–ë–´–¢–û–ö" if current_profit < 0 else "–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô"
            }
            formatted_active_trades.append(formatted_trade)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º —Å–¥–µ–ª–∫–∞–º
        total_closed_profit = sum(float(t.get('profit', 0)) for t in closed_trades)
        profitable_closed = len([t for t in closed_trades if float(t.get('profit', 0)) > 0])
        losing_closed = len([t for t in closed_trades if float(t.get('profit', 0)) < 0])
        
        market_data = {
            'timestamp': datetime.now().isoformat(),
            'balance': session.get('balance', []) if session else [],
            'instruments': detailed_instruments,
            'price_history': price_history,
            'active_trades': formatted_active_trades,  # –° —Ä–µ–∞–ª—å–Ω—ã–º PnL!
            'closed_trades_stats': {
                'total_count': len(closed_trades),
                'profitable_count': profitable_closed,
                'losing_count': losing_closed,
                'total_profit': total_closed_profit
            },
            'user_balance': session.get('miner', {}) if session else {},
            'available_wallet': DEFAULT_WALLET
        }
        
        return market_data
    
    def format_ai_prompt(self, market_data):
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ò–ò —Å –†–ï–ê–õ–¨–ù–´–ú PnL"""
        with open('prompt.txt', 'r', encoding='utf-8') as f:
            prompt = f.read()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
        instruments_info = []
        for inst in market_data['instruments']:
            trend_info = f", {inst.get('trend', '')} ({inst.get('trend_strength', 0):.2f}%)" if inst.get('trend') else ""
            instruments_info.append(
                f"{inst['symbol']} ({inst['alias']}): {inst['current_rate']} "
                f"(ask: {inst['ask']}, bid: {inst['bid']}){trend_info}"
            )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —Å –†–ï–ê–õ–¨–ù–´–ú PnL
        active_trades_info = []
        for trade in market_data['active_trades']:
            profit_icon = "üü¢" if trade['current_profit'] > 0 else "üî¥" if trade['current_profit'] < 0 else "‚ö™"
            profit_color = "+" if trade['current_profit'] > 0 else ""
            
            active_trades_info.append(
                f"{profit_icon} ID: {trade['id']} | {trade['instrument']} {trade['direction'].upper()} | "
                f"${trade['amount']} x{trade['leverage']} | "
                f"PnL: {profit_color}${trade['current_profit']:.2f} ({profit_color}{trade['profit_percent']:.1f}%) | "
                f"–°—Ç–∞—Ç—É—Å: {trade['profit_status']}"
            )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
        closed_stats = market_data['closed_trades_stats']
        closed_trades_info = (
            f"–í—Å–µ–≥–æ: {closed_stats['total_count']} | "
            f"–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {closed_stats['profitable_count']} | "
            f"–£–±—ã—Ç–æ—á–Ω—ã—Ö: {closed_stats['losing_count']} | "
            f"–û–±—â–∏–π PnL: {closed_stats['total_profit']:.2f}$"
        )
        
        current_data = f"""
üéØ –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –°–î–ï–õ–û–ö –Ω–∞ {market_data['timestamp']}:

üí∞ –ë–ê–õ–ê–ù–° –ö–û–®–ï–õ–¨–ö–û–í:
{json.dumps(market_data['balance'], indent=2, ensure_ascii=False)}

üìä –î–û–°–¢–£–ü–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:
{chr(10).join(instruments_info)}

üíπ –ê–ö–¢–ò–í–ù–´–ï –°–î–ï–õ–ö–ò ({len(market_data['active_trades'])}) - –†–ï–ê–õ–¨–ù–´–ô PnL:
{chr(10).join(active_trades_info) if active_trades_info else '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫'}

üìà –ò–°–¢–û–†–ò–Ø –ó–ê–ö–†–´–¢–´–• –°–î–ï–õ–û–ö:
{closed_trades_info}

–î–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ—à–µ–ª–µ–∫: {market_data['available_wallet']}

–ü–†–ò–ú–ò –û–ë–û–°–ù–û–í–ê–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï:
"""
        
        return prompt + current_data
    
    def execute_ai_commands(self, commands, market_data):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –æ—Ç –ò–ò —Å —É—á–µ—Ç–æ–º PnL"""
        action = commands.get('action')
        comment = commands.get('comment', '')
        
        print(f"\nü§ñ –ö–æ–º–º–µ–Ω—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {comment}")
        
        if action == 'open':
            instrument = commands.get('instrument')
            direction = commands.get('direction')
            amount = commands.get('amount')
            leverage = commands.get('leverage')
            
            if all([instrument, direction, amount, leverage]):
                instrument_exists = any(inst['symbol'] == instrument for inst in market_data['instruments'])
                if not instrument_exists:
                    print(f"‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {instrument} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return
                
                result = self.api.open_trade(
                    amount=float(amount),
                    direction=direction,
                    instrument=instrument,
                    leverage=int(leverage),
                    wallet=DEFAULT_WALLET
                )
                
                if result and 'trade' in result:
                    trade = result['trade']
                    print(f"‚úÖ –û–¢–ö–†–´–¢–ê –°–î–ï–õ–ö–ê: {instrument} {direction} ${amount} x{leverage} (ID: {trade['id']})")
                    self.stats['total_trades'] += 1
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏")
        
        elif action == 'close':
            trade_id = commands.get('close_trade')
            if trade_id:
                active_trade_ids = [str(trade['id']) for trade in market_data['active_trades']]
                if trade_id not in active_trade_ids:
                    print(f"‚ùå –°–¥–µ–ª–∫–∞ {trade_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!")
                    return
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–¥–µ–ª–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è PnL
                closing_trade = next((t for t in market_data['active_trades'] if str(t['id']) == trade_id), None)
                if closing_trade:
                    print(f"üîí –ó–ê–ö–†–´–í–ê–ï–ú –°–î–ï–õ–ö–£: ID {trade_id}")
                    print(f"   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {closing_trade['instrument']}")
                    print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {closing_trade['direction']}")
                    print(f"   –ò—Ç–æ–≥–æ–≤—ã–π PnL: {closing_trade['current_profit']:.2f}$ ({closing_trade['profit_percent']:.1f}%)")
                
                result = self.api.close_trade(trade_id)
                if result:
                    print(f"‚úÖ –°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê –£–°–ü–ï–®–ù–û!")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ {trade_id}")
        
        elif action == 'wait':
            print(f"‚è≥ –û–ñ–ò–î–ê–ù–ò–ï: {comment}")
        
        else:
            print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
    
    def print_status(self, market_data, commands):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–æ–Ω—Å–æ–ª—å —Å PnL"""
        print("\n" + "="*70)
        print(f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
        
        # –ë–∞–ª–∞–Ω—Å
        balance_str = ""
        for bal in market_data['balance']:
            balance_str += f"{bal['wallet']}: ${bal['amount']} "
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance_str.strip()}")
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —Å PnL
        print(f"üîß –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {len(market_data['active_trades'])}")
        for trade in market_data['active_trades']:
            profit_icon = "üü¢" if trade['current_profit'] > 0 else "üî¥" if trade['current_profit'] < 0 else "‚ö™"
            profit_sign = "+" if trade['current_profit'] > 0 else ""
            print(f"   {profit_icon} ID: {trade['id']} | {trade['instrument']} {trade['direction']} | "
                  f"PnL: {profit_sign}{trade['current_profit']:.2f}$ ({profit_sign}{trade['profit_percent']:.1f}%)")
        
        # –î–µ–π—Å—Ç–≤–∏–µ –ò–ò
        action = commands.get('action', 'wait')
        if action == 'open':
            print(f"üéØ –î–µ–π—Å—Ç–≤–∏–µ: –û–¢–ö–†–´–¢–ò–ï {commands.get('instrument')}")
        elif action == 'close':
            print(f"üéØ –î–µ–π—Å—Ç–≤–∏–µ: –ó–ê–ö–†–´–¢–ò–ï {commands.get('close_trade')}")
        else:
            print(f"üéØ –î–µ–π—Å—Ç–≤–∏–µ: –û–ñ–ò–î–ê–ù–ò–ï")
        
        print("="*70)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ AI –¢—Ä–µ–π–¥–µ—Ä–∞...")
        print("üìä –¢–µ–ø–µ—Ä—å –ò–ò –≤–∏–¥–∏—Ç –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –ø–æ —Å–¥–µ–ª–∫–∞–º!")
        
        while True:
            try:
                market_data = self.get_market_data()
                prompt = self.format_ai_prompt(market_data)
                
                ai_response = self.ai.call_ai([{"role": "user", "content": prompt}])
                print(f"üß† –û—Ç–≤–µ—Ç –ò–ò: {ai_response}")
                
                commands = self.ai.parse_ai_response(ai_response)
                self.print_status(market_data, commands)
                self.execute_ai_commands(commands, market_data)
                
                print(f"\n‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ {UPDATE_INTERVAL} —Å–µ–∫—É–Ω–¥...")
                time.sleep(UPDATE_INTERVAL)
                
            except KeyboardInterrupt:
                print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(UPDATE_INTERVAL)

if __name__ == "__main__":
    bot = TradingBot()
    bot.run()
